<?xml version="1.0" encoding="UTF-8"?>
<operation id="70495073-6e3a-4372-844d-fd63cee3b9bc">
  <descriptionCdata><![CDATA[70495073-6e3a-4372-844d-fd63cee3b9bc.description=<pre>\nChecks for anomolies in the output of IOStat. There should be two readings, the average since bootup, and the current.\n\n\nInput Parameters\:\ndata - the raw output of the Get Extended IO Information operation.\n\nReturns\:\nA summary of the IO information.\n\nResponses\:\nsuccess - output successfully checked.</pre>
]]></descriptionCdata>
  <annotation>70495073-6e3a-4372-844d-fd63cee3b9bc.description</annotation>
  <name>Check IO information</name>
  <categories/>
  <inputs>
    <resultBinding id="76c34501-2a18-4c32-9fa8-56c58d20dbf5">
      <annotation></annotation>
      <assignFromContext>true</assignFromContext>
      <assignToContext>false</assignToContext>
      <inputType>STRING</inputType>
      <isList>false</isList>
      <required>false</required>
      <isPersisted>true</isPersisted>
      <inputSymbol>data</inputSymbol>
      <listDelimiter>,</listDelimiter>
      <record>false</record>
    </resultBinding>
    <staticBinding id="4053e99b-f7c5-438f-997f-4ecb81869288">
      <annotation></annotation>
      <toContextKey></toContextKey>
      <fromContextKey></fromContextKey>
      <assignFromContext>false</assignFromContext>
      <assignToContext>false</assignToContext>
      <inputType>STRING</inputType>
      <recordKey></recordKey>
      <isList>false</isList>
      <required>false</required>
      <isPersisted>true</isPersisted>
      <inputSymbol>Field_1</inputSymbol>
      <listDelimiter></listDelimiter>
      <value>${data}</value>
      <record>false</record>
    </staticBinding>
    <staticBinding id="8203f5b2-ad24-4b7a-9927-e90da3e6e465">
      <annotation></annotation>
      <toContextKey></toContextKey>
      <fromContextKey></fromContextKey>
      <assignFromContext>false</assignFromContext>
      <assignToContext>false</assignToContext>
      <inputType>STRING</inputType>
      <recordKey></recordKey>
      <isList>false</isList>
      <required>false</required>
      <isPersisted>true</isPersisted>
      <inputSymbol>Field_2</inputSymbol>
      <listDelimiter></listDelimiter>
      <value>${in2}</value>
      <record>false</record>
    </staticBinding>
    <staticBinding id="dc68d0bd-e5e9-4d53-ba56-ce5089fc645e">
      <annotation></annotation>
      <toContextKey></toContextKey>
      <fromContextKey></fromContextKey>
      <assignFromContext>false</assignFromContext>
      <assignToContext>false</assignToContext>
      <inputType>STRING</inputType>
      <recordKey></recordKey>
      <isList>false</isList>
      <required>false</required>
      <isPersisted>true</isPersisted>
      <inputSymbol>Field_3</inputSymbol>
      <listDelimiter></listDelimiter>
      <value>${in3}</value>
      <record>false</record>
    </staticBinding>
    <staticBinding id="63e7e685-0c99-4169-a6de-9cb1731ba4fd">
      <annotation></annotation>
      <toContextKey></toContextKey>
      <fromContextKey></fromContextKey>
      <assignFromContext>false</assignFromContext>
      <assignToContext>false</assignToContext>
      <inputType>STRING</inputType>
      <recordKey></recordKey>
      <isList>false</isList>
      <required>false</required>
      <isPersisted>true</isPersisted>
      <inputSymbol>Field_4</inputSymbol>
      <listDelimiter></listDelimiter>
      <value>${in4}</value>
      <record>false</record>
    </staticBinding>
  </inputs>
  <scriptlet id="6f49859b-8adc-4119-9974-3cff49e6cb71">
    <annotation></annotation>
    <name>Operation Check IO information (dafafeb5-ffe3-4996-a192-84fcdea08c50)</name>
    <script>// this assume we are getting extended IO stat information and looks for anomolies
// there should be two readings, the first is the average since boot,
// the second one is the current 

output = &quot;&quot;;
showIOStatInfo();
scriptletResult = output;

function showIOStatInfo() {

   iostat = scriptletContext.get(&quot;ic_iostat&quot;);

   // deal with the iostat information
   // this assume we are getting extended IO stat information and looks for anomolies
   // there should be two readings, the first is the average since boot,
   // the second one is the current 

   output = &quot;\nDevice IO checks:\n&quot;;

   // first, split it all into lines
   data = &quot;&quot;;
   data += iostat;
   lines = data.split(/\n/);

   // we know the first two lines are header, go find the header for the second set
   for (i = 2; i &lt; 1000; i++) {
      second_set = 0;
      if (lines[i].match(/extended device/) != null) {
         second_set = i + 2;
         break;
      }
   }

   // how many lines are there?
   line_count = i - 2;
   if (line_count &gt; 0) {
      for (i = 0; i &lt; line_count; i++) {
         // split the average line and current line into columns
         average = lines[i + 2].split(/\s+/);
         current = lines[line_count + i + 4].split(/\s+/);
         this_output = &quot;&quot;;

         // compare key stats of each lines average versus now
         creads = parseInt(current[1]);
         areads = parseInt(average[1]);
         cwrites = parseInt(current[2]);
         awrites = parseInt(average[2]);
         cwsvc = parseInt(current[7]);
         casvc = parseInt(current[8]);
         cwait = parseInt(current[9]);
         await = parseInt(average[9]);
         cbusy = parseInt(current[10]);
         cerrors = parseInt(current[14]);
         name = current[15];

         // look for some anomolies
         if (cwait &gt; (await * 1.25)) this_output += &quot;Current disk wait on &quot; + name + &quot; is more than 25% above average\n&quot;;
         if (cwait &gt; 5 &amp;&amp; cbusy &gt;= 10) this_output += &quot;Disk wait on &quot; + name + &quot; is above 5%\n&quot;;
         if (cwsvc + casvc &gt; 30 &amp;&amp; cbusy &gt; 5) this_output += &quot;Current disk wait time exceeds 30 ms on &quot; + name + &quot;\n&quot;;
         if (cbusy &gt;= 60) this_output += name + &quot; is over 60% busy\n&quot;;
         if (creads &gt; (areads * 3)) this_output += &quot;Current reads on &quot; + name + &quot; are more than 300% of average\n&quot;;
         if (cwrites &gt; (awrites * 3)) this_output += &quot;Current writes on &quot; + name + &quot; are more than 300% of average\n&quot;;

         // check error counts
         if (cerrors &gt; 3) this_output += &quot;More than 3 errors encountered on&quot; + name + &quot;\n&quot;;
      
         // check to see if we found anything
         if (this_output == &quot;&quot;) {
            this_output = name + &quot; looks normal\n&quot;;
         }
         output += this_output;
      }
   }
   
//   // add in the current raw data
//   output += &quot;\nDetailed iostat information:\n&quot;;
//   for (i = line_count + 2; i &lt; 10000; i++) {
//      if (lines[i] == null) break;
//      output += lines[i] + &quot;\n&quot;;
//   }
}


</script>
    <type>RHINO</type>
  </scriptlet>
  <possibleResponses>
    <opResponse id="59ab66dc-290b-498f-b258-73bc28b42ddc">
      <annotation></annotation>
      <name>success</name>
      <isDefault>true</isDefault>
      <onFailure>false</onFailure>
      <type>RESOLVED</type>
      <matchRules/>
    </opResponse>
  </possibleResponses>
  <availableResultExpressions/>
  <resultExpression id="e593954f-c247-4dbb-a1f0-fbbea45b337d">
    <annotation></annotation>
    <name>Field 1</name>
    <fieldName>Field_1</fieldName>
    <sourceType>RAWRESULT</sourceType>
    <filters/>
  </resultExpression>
  <iconSpec id="754152ec-bf82-42d2-a64d-3ed30fd03955">
    <baseIcon>PCI-card.png</baseIcon>
    <basePath>Operating System/</basePath>
    <readOnly>false</readOnly>
    <layers>
      <iconSpec id="50e4eca4-6dff-49e6-9916-c82ed0a7138a">
        <baseIcon>view.png</baseIcon>
        <basePath>Annotations/</basePath>
        <readOnly>false</readOnly>
        <layers/>
      </iconSpec>
    </layers>
  </iconSpec>
  <opRef>
    <refId>ddd79f22-8b1e-4605-88d5-d912bb2da2b9</refId>
  </opRef>
  <fieldValues/>
  <groupAliasRef>
    <refId>5233030c-af46-432b-a682-b326ca6bf2ae</refId>
    <refName>RAS_Operator_Path</refName>
  </groupAliasRef>
  <overrideGroupAlias>${overrideJRAS}</overrideGroupAlias>
</operation>